/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projeto.vendas.view;

import java.awt.Image;
import java.awt.Toolkit;
import static java.lang.Integer.parseInt;
import java.net.URL;
import java.sql.Date;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import projeto.vendas.control.Conexao;
import projeto.vendas.control.DaoGerarPedido;
import projeto.vendas.control.DaoPFisica;
import projeto.vendas.control.DaoPJuridica;
import projeto.vendas.control.DaoPedidoProduto;
import projeto.vendas.control.DaoProduto;
import projeto.vendas.model.Login;
import projeto.vendas.model.Pedido;
import projeto.vendas.model.PedidoProduto;
import projeto.vendas.model.PessoaFisica;
import projeto.vendas.model.PessoaJuridica;

/**
 *
 * @author Cleiton
 */
public class GuiAnalise_de_Credito extends javax.swing.JFrame {

    /**
     * Creates new form GuiAnálise_de_Crédito
     */
    public GuiAnalise_de_Credito(Login login) {
        initComponents();
        this.login = login;
        GuiAnalise_de_Credito.this.setTitle("Analise de Crédito  " + "Usuário:  " + login.getNome()+
                "         " +"Codigo:  " + login.getCodigo());
        DefaultTableModel modelo = (DefaultTableModel) tblPedido.getModel();
        tblPedido.setRowSorter(new TableRowSorter(modelo));
        
        URL caminhoIcone = getClass().getResource("/projeto/vendas/model/icones/logotipo.png");
        Image iconeTitulo = Toolkit.getDefaultToolkit().getImage(caminhoIcone);
        this.setIconImage(iconeTitulo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        btnReprovar = new javax.swing.JButton();
        btnAprovar = new javax.swing.JButton();
        JScrollPanePedido = new javax.swing.JScrollPane();
        tblPedido = new javax.swing.JTable();
        lblAnalise_de_Credito = new javax.swing.JLabel();
        jPanel_Pesquisa = new javax.swing.JPanel();
        lblPesquisa = new javax.swing.JLabel();
        rbtnNumero_do_Pedido = new javax.swing.JRadioButton();
        txtPesquisaPedido = new javax.swing.JTextField();
        rbtnNumero_do_Cliente = new javax.swing.JRadioButton();
        txtPesquisaCliente = new javax.swing.JTextField();
        cbxHabilitaPesq1 = new javax.swing.JCheckBox();
        jPanel_Complemento_da_Pesquisa = new javax.swing.JPanel();
        lblFiltro = new javax.swing.JLabel();
        cbxFiltro = new javax.swing.JComboBox<>();
        jPanel_Período_da_Pesquisa = new javax.swing.JPanel();
        lblData_Inicial = new javax.swing.JLabel();
        lblData_Final = new javax.swing.JLabel();
        ftxtData_Inicial = new javax.swing.JFormattedTextField();
        ftxtData_Final = new javax.swing.JFormattedTextField();
        btnBuscar = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Análise de Crédito");
        setName("tela1"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btnReprovar.setFont(new java.awt.Font("Times New Roman", 3, 12)); // NOI18N
        btnReprovar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projeto/vendas/model/icones/Reprovar.png"))); // NOI18N
        btnReprovar.setText("Reprovar Pedido");
        btnReprovar.setEnabled(false);
        btnReprovar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReprovarActionPerformed(evt);
            }
        });

        btnAprovar.setFont(new java.awt.Font("Times New Roman", 3, 12)); // NOI18N
        btnAprovar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projeto/vendas/model/icones/Aprovar.png"))); // NOI18N
        btnAprovar.setText("Aprovar Pedido");
        btnAprovar.setEnabled(false);
        btnAprovar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAprovarActionPerformed(evt);
            }
        });

        JScrollPanePedido.setToolTipText("");

        tblPedido.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tblPedido.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        tblPedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°  Pedido", "Cód. Cliente", "Cliente", "Data do Pedido", "Valor", "Situação"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPedido.setName(""); // NOI18N
        tblPedido.setRowHeight(20);
        tblPedido.setRowMargin(2);
        tblPedido.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblPedido.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblPedidoMousePressed(evt);
            }
        });
        tblPedido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblPedidoKeyPressed(evt);
            }
        });
        JScrollPanePedido.setViewportView(tblPedido);
        if (tblPedido.getColumnModel().getColumnCount() > 0) {
            tblPedido.getColumnModel().getColumn(0).setMinWidth(60);
            tblPedido.getColumnModel().getColumn(0).setPreferredWidth(60);
            tblPedido.getColumnModel().getColumn(0).setMaxWidth(80);
            tblPedido.getColumnModel().getColumn(1).setMinWidth(80);
            tblPedido.getColumnModel().getColumn(1).setPreferredWidth(80);
            tblPedido.getColumnModel().getColumn(1).setMaxWidth(80);
            tblPedido.getColumnModel().getColumn(2).setMinWidth(120);
            tblPedido.getColumnModel().getColumn(2).setPreferredWidth(150);
            tblPedido.getColumnModel().getColumn(2).setMaxWidth(180);
            tblPedido.getColumnModel().getColumn(3).setMinWidth(70);
            tblPedido.getColumnModel().getColumn(3).setPreferredWidth(70);
            tblPedido.getColumnModel().getColumn(3).setMaxWidth(100);
            tblPedido.getColumnModel().getColumn(4).setMinWidth(80);
            tblPedido.getColumnModel().getColumn(4).setPreferredWidth(80);
            tblPedido.getColumnModel().getColumn(4).setMaxWidth(100);
            tblPedido.getColumnModel().getColumn(5).setMinWidth(100);
            tblPedido.getColumnModel().getColumn(5).setPreferredWidth(115);
            tblPedido.getColumnModel().getColumn(5).setMaxWidth(130);
        }

        lblAnalise_de_Credito.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projeto/vendas/model/icones/Analise de credito.png"))); // NOI18N

        jPanel_Pesquisa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pesquisa", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 3, 12))); // NOI18N

        lblPesquisa.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblPesquisa.setText("Pesquisar por:");

        buttonGroup1.add(rbtnNumero_do_Pedido);
        rbtnNumero_do_Pedido.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        rbtnNumero_do_Pedido.setSelected(true);
        rbtnNumero_do_Pedido.setText("N° do Pedido");
        rbtnNumero_do_Pedido.setEnabled(false);
        rbtnNumero_do_Pedido.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbtnNumero_do_PedidoStateChanged(evt);
            }
        });

        txtPesquisaPedido.setEnabled(false);

        buttonGroup1.add(rbtnNumero_do_Cliente);
        rbtnNumero_do_Cliente.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        rbtnNumero_do_Cliente.setText("N° do Cliente");
        rbtnNumero_do_Cliente.setEnabled(false);

        txtPesquisaCliente.setEnabled(false);

        cbxHabilitaPesq1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        cbxHabilitaPesq1.setText("Habilitar pesquisa por Pedido/CLiente");
        cbxHabilitaPesq1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxHabilitaPesq1ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel_PesquisaLayout = new javax.swing.GroupLayout(jPanel_Pesquisa);
        jPanel_Pesquisa.setLayout(jPanel_PesquisaLayout);
        jPanel_PesquisaLayout.setHorizontalGroup(
            jPanel_PesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_PesquisaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_PesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel_PesquisaLayout.createSequentialGroup()
                        .addComponent(rbtnNumero_do_Cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisaCliente))
                    .addComponent(lblPesquisa)
                    .addGroup(jPanel_PesquisaLayout.createSequentialGroup()
                        .addComponent(rbtnNumero_do_Pedido, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisaPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel_PesquisaLayout.createSequentialGroup()
                .addComponent(cbxHabilitaPesq1)
                .addGap(0, 88, Short.MAX_VALUE))
        );
        jPanel_PesquisaLayout.setVerticalGroup(
            jPanel_PesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_PesquisaLayout.createSequentialGroup()
                .addComponent(cbxHabilitaPesq1)
                .addGap(14, 14, 14)
                .addComponent(lblPesquisa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_PesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPesquisaPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbtnNumero_do_Pedido))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addGroup(jPanel_PesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnNumero_do_Cliente)
                    .addComponent(txtPesquisaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel_Complemento_da_Pesquisa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Complemento da Pesquisa", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 3, 12))); // NOI18N

        lblFiltro.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblFiltro.setText("Filtrar por:");

        cbxFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Aprovados", "Reprovados", "Pendentes", "Concluido" }));

        javax.swing.GroupLayout jPanel_Complemento_da_PesquisaLayout = new javax.swing.GroupLayout(jPanel_Complemento_da_Pesquisa);
        jPanel_Complemento_da_Pesquisa.setLayout(jPanel_Complemento_da_PesquisaLayout);
        jPanel_Complemento_da_PesquisaLayout.setHorizontalGroup(
            jPanel_Complemento_da_PesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_Complemento_da_PesquisaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_Complemento_da_PesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFiltro)
                    .addComponent(cbxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel_Complemento_da_PesquisaLayout.setVerticalGroup(
            jPanel_Complemento_da_PesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_Complemento_da_PesquisaLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblFiltro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jPanel_Período_da_Pesquisa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Período da Pesquisa", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 3, 12))); // NOI18N

        lblData_Inicial.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblData_Inicial.setText("Data Inicial");

        lblData_Final.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        lblData_Final.setText("Data Final");

        try {
            ftxtData_Inicial.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        ftxtData_Inicial.setText("01012000");

        try {
            ftxtData_Final.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        ftxtData_Final.setText("");

        javax.swing.GroupLayout jPanel_Período_da_PesquisaLayout = new javax.swing.GroupLayout(jPanel_Período_da_Pesquisa);
        jPanel_Período_da_Pesquisa.setLayout(jPanel_Período_da_PesquisaLayout);
        jPanel_Período_da_PesquisaLayout.setHorizontalGroup(
            jPanel_Período_da_PesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_Período_da_PesquisaLayout.createSequentialGroup()
                .addGroup(jPanel_Período_da_PesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblData_Inicial)
                    .addComponent(ftxtData_Inicial, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel_Período_da_PesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblData_Final)
                    .addComponent(ftxtData_Final, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel_Período_da_PesquisaLayout.setVerticalGroup(
            jPanel_Período_da_PesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_Período_da_PesquisaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_Período_da_PesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblData_Inicial)
                    .addComponent(lblData_Final))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_Período_da_PesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ftxtData_Inicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ftxtData_Final, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        btnBuscar.setFont(new java.awt.Font("Times New Roman", 3, 12)); // NOI18N
        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projeto/vendas/model/icones/Consultar.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnVoltar.setFont(new java.awt.Font("Times New Roman", 3, 12)); // NOI18N
        btnVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projeto/vendas/model/icones/Voltar.png"))); // NOI18N
        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(lblAnalise_de_Credito, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel_Pesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel_Complemento_da_Pesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnVoltar))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(btnBuscar)
                                .addGap(37, 37, 37))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel_Período_da_Pesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(btnReprovar)
                        .addGap(293, 293, 293)
                        .addComponent(btnAprovar))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JScrollPanePedido, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JScrollPanePedido, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnReprovar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAprovar)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel_Pesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel_Complemento_da_Pesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel_Período_da_Pesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnVoltar)
                            .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAnalise_de_Credito, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        conexao = new Conexao();
        conexao.setDriver();
        conexao.setConnectionString();

        daoProduto = new DaoProduto(conexao.conectar());
        daoPFisica = new DaoPFisica(conexao.conectar());
        daoPJrudica = new DaoPJuridica(conexao.conectar());

        SimpleDateFormat formatador = new SimpleDateFormat("ddMMyyyy");
        Date dataDoSistema = new Date(System.currentTimeMillis());
        String dataEmTexto = formatador.format(dataDoSistema);
        ftxtData_Final.setText(dataEmTexto);


    }//GEN-LAST:event_formWindowOpened

    private void btnAprovarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAprovarActionPerformed
        if (tblPedido.getSelectedRow() >= 0) {
            if (tblPedido.getValueAt((tblPedido.getSelectedRow()), 5).equals("PENDENTE")) {
                int valorPedido = (int) tblPedido.getModel().getValueAt(tblPedido.getSelectedRow(), 0);
                daoGerarPedido.aprovar(valorPedido);
                tblPedido.getModel().setValueAt("APROVADO", (tblPedido.getSelectedRow()), 5);
                btnAprovar.setEnabled(false);
                btnReprovar.setEnabled(false);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Escolha o pedido para ser aprovado!");
            txtPesquisaPedido.requestFocus();
        }
    }//GEN-LAST:event_btnAprovarActionPerformed

    private void btnReprovarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReprovarActionPerformed
        if (tblPedido.getSelectedRow() >= 0) {
            if (tblPedido.getValueAt((tblPedido.getSelectedRow()), 5).equals("PENDENTE")) {
                int valorPedido = (int) tblPedido.getModel().getValueAt(tblPedido.getSelectedRow(), 0);
                daoGerarPedido.reprovar(valorPedido);
                tblPedido.getModel().setValueAt("REPROVADO", (tblPedido.getSelectedRow()), 5);
                btnAprovar.setEnabled(false);
                btnReprovar.setEnabled(false);
                //Incrementando a Quantidade do`Pedido Reprovado ao ESTOQUE.
                DaoPedidoProduto daoPedidoProduto = new DaoPedidoProduto(conexao.conectar());
                ArrayList<PedidoProduto> ListaPedidoProduto = new ArrayList<PedidoProduto>();
                ListaPedidoProduto = daoPedidoProduto.listarPedidoProduto(valorPedido);
                for(int i = 0; i < ListaPedidoProduto.size(); i++) {
                    daoProduto.IncrementaEstoque(ListaPedidoProduto.get(i).getProdutoCod(), ListaPedidoProduto.get(i).getProdutoQtd());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Escolha o pedido para ser reprovado!");
            txtPesquisaPedido.requestFocus();
        }
    }//GEN-LAST:event_btnReprovarActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        //limpa caso ja tiver algo na tabela
        btnAprovar.setEnabled(false);
        btnReprovar.setEnabled(false);
        if (flag == 1) {
            model.setRowCount(0);
        }
        daoGerarPedido = new DaoGerarPedido(conexao.conectar());
        // caso habilite para pesquisar por cliente ou codigo do pedido
        if (cbxHabilitaPesq1.isSelected()) {
            if (rbtnNumero_do_Pedido.isSelected()) {
                if (txtPesquisaPedido.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, "Digite o Numero do pedido desejado!");
                    txtPesquisaPedido.requestFocus();
                } else {

                    pedido = null;
                    pedido = daoGerarPedido.Consultar(parseInt(txtPesquisaPedido.getText()));

                    if (pedido == null) {
                        JOptionPane.showMessageDialog(null, "Este pedido não consta no Sistema!");
                        txtPesquisaPedido.requestFocus();
                        txtPesquisaPedido.setText("");
                    } else {
                        if (pedido.getClienteCod().substring(0, 2).equals("PF")) {
                            pessoaFisica = daoPFisica.consultar(pedido.getClienteCod());
                            nome = pessoaFisica.getNome();
                        } else {
                            pessoaJuridica = daoPJrudica.consultar(pedido.getClienteCod());
                            nome = pessoaJuridica.getNome();
                        }
                        switch (pedido.getSituacao()) {
                            case 1:
                                legendaSituacao = "APROVADO";
                                break;
                            case 2:
                                legendaSituacao = "REPROVADO";
                                break;
                            case 3:
                                legendaSituacao = "PENDENTE";
                                break;
                            case 4:
                                legendaSituacao = "NFe EMITIDA";
                                break;
                        }
                        Object[] row = {
                            pedido.getCodigo(),
                            pedido.getClienteCod(),
                            nome,
                            pedido.getDtPedido().substring(0,pedido.getDtPedido().indexOf("-")),
                            formatador.format(pedido.getTotal()),
                            legendaSituacao};

                        model = (DefaultTableModel) tblPedido.getModel();
                        model.addRow(row);
                        flag = 1;
                    }
                }
            } else {
                if (txtPesquisaCliente.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, "Digite o Codigo do cliente desejado!");
                    txtPesquisaCliente.requestFocus();
                } else {
                    // Testa se o código é válido e se ele existe
                    if ((txtPesquisaCliente.getText().length() >= 3)
                            && (txtPesquisaCliente.getText().substring(0, 2).equals("PF")
                            || txtPesquisaCliente.getText().substring(0, 2).equals("PJ"))) {
                        //testa se o restante depois do prefixo so tem numero
                        System.out.println(txtPesquisaCliente.getText().
                                substring(2, txtPesquisaCliente.getText().length()));
                        if (testaNumeros(txtPesquisaCliente.getText().
                                substring(2, txtPesquisaCliente.getText().length())) == true) {
                            daoGerarPedido = new DaoGerarPedido(conexao.conectar());

                            pedido = null;
                            //aqui preciso pesquisar pelo codigo do cliente e voltar um array list 
                            // entre datas
                            ArrayList<Pedido> pedidosPorCod = daoGerarPedido.
                                    listarPedidosPorCod(txtPesquisaCliente.getText());

                            if (pedidosPorCod.size() == 0) {
                                JOptionPane.showMessageDialog(null, "Este cliente não consta no Sistema!");
                                txtPesquisaPedido.requestFocus();
                                txtPesquisaPedido.setText("");
                                flag = 0;
                            }
                            int diaI = parseInt(ftxtData_Inicial.getText().substring(0, 2));
                            int mesI = parseInt(ftxtData_Inicial.getText().substring(3, 5));
                            int anoI = parseInt(ftxtData_Inicial.getText().substring(6, 10));
                            LocalDate dataInicio = LocalDate.of(anoI, mesI, diaI);

                            int diaF = parseInt(ftxtData_Final.getText().substring(0, 2));
                            int mesF = parseInt(ftxtData_Final.getText().substring(3, 5));
                            int anoF = parseInt(ftxtData_Final.getText().substring(6, 10));
                            LocalDate dataFinal = LocalDate.of(anoF, mesF, diaF);

                            for (int x = 0; x < pedidosPorCod.size(); x++) {

                                int dia = parseInt(pedidosPorCod.get(x).getDtPedido().substring(0, 2));
                                int mes = parseInt(pedidosPorCod.get(x).getDtPedido().substring(3, 5));
                                int ano = parseInt(pedidosPorCod.get(x).getDtPedido().substring(6, 10));
                                LocalDate dataPedido = LocalDate.of(ano, mes, dia);

                                // testa se a data é maior que a data inicial da busca
                                if (dataPedido.isAfter(dataInicio) || dataPedido.isEqual(dataInicio)) {
                                    //testa se a data é menor que a data final da busca
                                    if (dataPedido.isBefore(dataFinal) || dataPedido.isEqual(dataFinal)) {
                                        //testa se o filtro nao é todos
                                        if (cbxFiltro.getSelectedIndex() != 0) {
                                            //verifica se o pedido testado esta com o filtro desejado
                                            if (pedidosPorCod.get(x).getSituacao() == cbxFiltro.getSelectedIndex()) {
                                                //testa se o pedido é feito para cliente pessoa fisica ou juridica
                                                if (pedidosPorCod.get(x).getClienteCod().substring(0, 2).equals("PF")) {
                                                    pessoaFisica = daoPFisica.consultar(pedidosPorCod.get(x).getClienteCod());
                                                    nome = pessoaFisica.getNome();
                                                } else {
                                                    pessoaJuridica = daoPJrudica.consultar(pedidosPorCod.get(x).getClienteCod());
                                                    nome = pessoaJuridica.getNome();
                                                }
                                                //insere uma linha na tabela com todos os dados requeridos 

                                                switch (pedidosPorCod.get(x).getSituacao()) {
                                                    case 1:
                                                        legendaSituacao = "APROVADO";
                                                        break;
                                                    case 2:
                                                        legendaSituacao = "REPROVADO";
                                                        break;
                                                    case 3:
                                                        legendaSituacao = "PENDENTE";
                                                        break;
                                                    case 4:
                                                        legendaSituacao = "NFe EMITIDA";
                                                        break;
                                                }
                                                Object[] row = {
                                                    pedidosPorCod.get(x).getCodigo(),
                                                    pedidosPorCod.get(x).getClienteCod(),
                                                    nome,
                                                    pedidosPorCod.get(x).getDtPedido().substring(0,pedidosPorCod.get(x).getDtPedido().indexOf("-")),
                                                    formatador.format(pedidosPorCod.get(x).getTotal()),
                                                    legendaSituacao};

                                                model = (DefaultTableModel) tblPedido.getModel();
                                                model.addRow(row);
                                                flag = 1;
                                            }
                                        } // aqui se caso a situacao for todos exibe todos por esse else
                                        else {
                                            if (pedidosPorCod.get(x).getClienteCod().substring(0, 2).equals("PF")) {
                                                pessoaFisica = daoPFisica.consultar(pedidosPorCod.get(x).getClienteCod());
                                                nome = pessoaFisica.getNome();
                                            } else {
                                                pessoaJuridica = daoPJrudica.consultar(pedidosPorCod.get(x).getClienteCod());
                                                nome = pessoaJuridica.getNome();
                                            }
                                            //insere uma linha na tabela com todos os dados requeridos 
                                            switch (pedidosPorCod.get(x).getSituacao()) {
                                                case 1:
                                                    legendaSituacao = "APROVADO";
                                                    break;
                                                case 2:
                                                    legendaSituacao = "REPROVADO";
                                                    break;
                                                case 3:
                                                    legendaSituacao = "PENDENTE";
                                                    break;
                                                case 4:
                                                    legendaSituacao = "NFe EMITIDA";
                                                    break;
                                            }
                                            Object[] row = {
                                                pedidosPorCod.get(x).getCodigo(),
                                                pedidosPorCod.get(x).getClienteCod(),
                                                nome,
                                                pedidosPorCod.get(x).getDtPedido().substring(0,pedidosPorCod.get(x).getDtPedido().indexOf("-")),
                                                formatador.format(pedidosPorCod.get(x).getTotal()),
                                                legendaSituacao};

                                            model = (DefaultTableModel) tblPedido.getModel();
                                            model.addRow(row);
                                            flag = 1;
                                        }
                                    }
                                }
                            }
                        } //caso ele nao encontre o padrao e nao seja maior que 3
                        else {
                            JOptionPane.showMessageDialog(null, "Digite o Codigo"
                                    + " do cliente válido com números apos prefixo!");
                            txtPesquisaCliente.setText("");
                            txtPesquisaCliente.requestFocus();
                            flag = 0;
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Digite o Codigo do "
                                + "cliente válido com o prefixo 'PF' ou 'PJ'"
                                + "e a sequência numérica!");
                        txtPesquisaCliente.setText("");
                        txtPesquisaCliente.requestFocus();
                        flag = 0;

                    }
                }
            }
        } // pesquisa generica com data de inicio e situação
        else {
            int diaI = parseInt(ftxtData_Inicial.getText().substring(0, 2));
            int mesI = parseInt(ftxtData_Inicial.getText().substring(3, 5));
            int anoI = parseInt(ftxtData_Inicial.getText().substring(6, 10));
            LocalDate dataInicio = LocalDate.of(anoI, mesI, diaI);


            int diaF = parseInt(ftxtData_Final.getText().substring(0, 2));
            int mesF = parseInt(ftxtData_Final.getText().substring(3, 5));
            int anoF = parseInt(ftxtData_Final.getText().substring(6, 10));
            LocalDate dataFinal = LocalDate.of(anoF, mesF, diaF);


            ArrayList<Pedido> pedidos = daoGerarPedido.ListarPedidos();

            for (int x = 0; x < pedidos.size(); x++) {
                int dia = parseInt(pedidos.get(x).getDtPedido().substring(0, 2));
                int mes = parseInt(pedidos.get(x).getDtPedido().substring(3, 5));
                int ano = parseInt(pedidos.get(x).getDtPedido().substring(6, 10));
                LocalDate dataPedido = LocalDate.of(ano, mes, dia);
                System.out.println(dataPedido);

                // testa se a data é maior que a data inicial da busca
                if (dataPedido.isAfter(dataInicio) || dataPedido.isEqual(dataInicio)) {
                    //testa se a data é menor que a data final da busca
                    if (dataPedido.isBefore(dataFinal) || dataPedido.isEqual(dataFinal)) {
                        //testa se o filtro nao é todos
                        if (cbxFiltro.getSelectedIndex() != 0) {
                            //verifica se o pedido testado esta com o filtro desejado
                            if (pedidos.get(x).getSituacao() == cbxFiltro.getSelectedIndex()) {
                                //testa se o pedido é feito para cliente pessoa fisica ou juridica
                                if (pedidos.get(x).getClienteCod().substring(0, 2).equals("PF")) {
                                    pessoaFisica = daoPFisica.consultar(pedidos.get(x).getClienteCod());
                                    nome = pessoaFisica.getNome();
                                } else {
                                    pessoaJuridica = daoPJrudica.consultar(pedidos.get(x).getClienteCod());
                                    nome = pessoaJuridica.getNome();
                                }
                                //insere uma linha na tabela com todos os dados requeridos 

                                switch (pedidos.get(x).getSituacao()) {
                                    case 1:
                                        legendaSituacao = "APROVADO";
                                        break;
                                    case 2:
                                        legendaSituacao = "REPROVADO";
                                        break;
                                    case 3:
                                        legendaSituacao = "PENDENTE";
                                        break;
                                    case 4:
                                        legendaSituacao = "NFe EMITIDA";
                                        break;
                                }
                                Object[] row = {
                                    pedidos.get(x).getCodigo(),
                                    pedidos.get(x).getClienteCod(),
                                    nome,
                                    pedidos.get(x).getDtPedido().substring(0,pedidos.get(x).getDtPedido().indexOf("-")),
                                    formatador.format(pedidos.get(x).getTotal()),
                                    legendaSituacao};

                                model = (DefaultTableModel) tblPedido.getModel();
                                model.addRow(row);
                                flag = 1;
                            }
                        } // aqui se caso a situacao for todos exibe todos por esse else
                        else {
                            if (pedidos.get(x).getClienteCod().substring(0, 2).equals("PF")) {
                                pessoaFisica = daoPFisica.consultar(pedidos.get(x).getClienteCod());
                                nome = pessoaFisica.getNome();
                            } else {
                                pessoaJuridica = daoPJrudica.consultar(pedidos.get(x).getClienteCod());
                                nome = pessoaJuridica.getNome();
                            }
                            //insere uma linha na tabela com todos os dados requeridos 
                            switch (pedidos.get(x).getSituacao()) {
                                case 1:
                                    legendaSituacao = "APROVADO";
                                    break;
                                case 2:
                                    legendaSituacao = "REPROVADO";
                                    break;
                                case 3:
                                    legendaSituacao = "PENDENTE";
                                    break;
                                case 4:
                                    legendaSituacao = "NFe EMITIDA";
                                    break;
                            }
                            Object[] row = {
                                pedidos.get(x).getCodigo(),
                                pedidos.get(x).getClienteCod(),
                                nome,
                                pedidos.get(x).getDtPedido().substring(0,pedidos.get(x).getDtPedido().indexOf("-")),
                                formatador.format(pedidos.get(x).getTotal()),
                                legendaSituacao};

                            model = (DefaultTableModel) tblPedido.getModel();
                            model.addRow(row);
                            flag = 1;
                        }

                    }
                }
            }
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void cbxHabilitaPesq1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxHabilitaPesq1ItemStateChanged
        if (cbxHabilitaPesq1.isSelected()) {
            rbtnNumero_do_Pedido.setEnabled(true);
            rbtnNumero_do_Cliente.setEnabled(true);
        } else {
            rbtnNumero_do_Pedido.setEnabled(false);
            rbtnNumero_do_Cliente.setEnabled(false);
            txtPesquisaCliente.setEnabled(false);
            txtPesquisaPedido.setEnabled(false);

            cbxFiltro.setEnabled(true);
            ftxtData_Inicial.setEnabled(true);
            ftxtData_Final.setEnabled(true);
        }
    }//GEN-LAST:event_cbxHabilitaPesq1ItemStateChanged

    private void rbtnNumero_do_PedidoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbtnNumero_do_PedidoStateChanged
        if (rbtnNumero_do_Pedido.isSelected()) {
            txtPesquisaPedido.setEnabled(true);
            txtPesquisaCliente.setEnabled(false);
            txtPesquisaCliente.setText("");

            cbxFiltro.setEnabled(false);
            ftxtData_Inicial.setEnabled(false);
            ftxtData_Final.setEnabled(false);
        } else {
            txtPesquisaPedido.setEnabled(false);
            txtPesquisaCliente.setEnabled(true);
            txtPesquisaPedido.setText("");

            cbxFiltro.setEnabled(true);
            ftxtData_Inicial.setEnabled(true);
            ftxtData_Final.setEnabled(true);
        }
    }//GEN-LAST:event_rbtnNumero_do_PedidoStateChanged

    private void tblPedidoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblPedidoKeyPressed
        /*if (evt.getKeyCode() == KeyEvent.VK_UP|| evt.getKeyCode() == KeyEvent.VK_DOWN) {
            if (tblPedido.getValueAt((tblPedido.getSelectedRow()), 5).equals("PENDENTE")) {
                btnAprovar.setEnabled(true);
                btnReprovar.setEnabled(true);
            }
            if (tblPedido.getValueAt((tblPedido.getSelectedRow()), 5).equals("NFe EMITIDA")) {
                JOptionPane.showMessageDialog(null, "Este pedido ja foi emitida a nota fiscal!");
                btnAprovar.setEnabled(false);
                btnReprovar.setEnabled(false);
            }
            if (tblPedido.getValueAt((tblPedido.getSelectedRow()), 5).equals("REPROVADO")) {
                JOptionPane.showMessageDialog(null, "Este pedido foi reprovado!");
                btnAprovar.setEnabled(false);
                btnReprovar.setEnabled(false);
            }
            if (tblPedido.getValueAt((tblPedido.getSelectedRow()), 5).equals("APROVADO")) {
                JOptionPane.showMessageDialog(null, "Este pedido já esta aprovado!");
                btnAprovar.setEnabled(false);
                btnReprovar.setEnabled(false);
            }
        }
         */
    }//GEN-LAST:event_tblPedidoKeyPressed

    private void tblPedidoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPedidoMousePressed
        if (tblPedido.getSelectedRow() >= 0) {
            if (tblPedido.getValueAt((tblPedido.getSelectedRow()), 5).equals("PENDENTE")) {
                btnAprovar.setEnabled(true);
                btnReprovar.setEnabled(true);
            }
            if (tblPedido.getValueAt((tblPedido.getSelectedRow()), 5).equals("NFe EMITIDA")) {
                JOptionPane.showMessageDialog(null, "Este pedido ja foi emitida a nota fiscal!");
                btnAprovar.setEnabled(false);
                btnReprovar.setEnabled(false);
            }
            if (tblPedido.getValueAt((tblPedido.getSelectedRow()), 5).equals("REPROVADO")) {
                JOptionPane.showMessageDialog(null, "Este pedido foi reprovado!");
                btnAprovar.setEnabled(false);
                btnReprovar.setEnabled(false);
            }
            if (tblPedido.getValueAt((tblPedido.getSelectedRow()), 5).equals("APROVADO")) {
                JOptionPane.showMessageDialog(null, "Este pedido já esta aprovado!");
                btnAprovar.setEnabled(false);
                btnReprovar.setEnabled(false);
            }
        }
    }//GEN-LAST:event_tblPedidoMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuiAnalise_de_Credito.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuiAnalise_de_Credito.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuiAnalise_de_Credito.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuiAnalise_de_Credito.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuiAnalise_de_Credito(login).setVisible(true);
            }
        });
    }

    private DecimalFormat formatador = new DecimalFormat("0.00");
    private int flag = 0;
    private Conexao conexao;
    private DaoProduto daoProduto = null;
    private DaoPFisica daoPFisica = null;
    private DaoPJuridica daoPJrudica = null;
    private PessoaFisica pessoaFisica = null;
    private PessoaJuridica pessoaJuridica = null;
    private static Login login = null;
    private DaoGerarPedido daoGerarPedido = null;
    private Pedido pedido = null;
    private String nome;
    private DefaultTableModel model = null;
    private String legendaSituacao = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane JScrollPanePedido;
    private javax.swing.JButton btnAprovar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnReprovar;
    private javax.swing.JButton btnVoltar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbxFiltro;
    private javax.swing.JCheckBox cbxHabilitaPesq1;
    private javax.swing.JFormattedTextField ftxtData_Final;
    private javax.swing.JFormattedTextField ftxtData_Inicial;
    private javax.swing.JPanel jPanel_Complemento_da_Pesquisa;
    private javax.swing.JPanel jPanel_Período_da_Pesquisa;
    private javax.swing.JPanel jPanel_Pesquisa;
    private javax.swing.JLabel lblAnalise_de_Credito;
    private javax.swing.JLabel lblData_Final;
    private javax.swing.JLabel lblData_Inicial;
    private javax.swing.JLabel lblFiltro;
    private javax.swing.JLabel lblPesquisa;
    private javax.swing.JRadioButton rbtnNumero_do_Cliente;
    private javax.swing.JRadioButton rbtnNumero_do_Pedido;
    private javax.swing.JTable tblPedido;
    private javax.swing.JTextField txtPesquisaCliente;
    private javax.swing.JTextField txtPesquisaPedido;
    // End of variables declaration//GEN-END:variables
    public boolean testaNumeros(String texto) {
        for (int i = 0; i < texto.length(); i++) {
            if (!Character.isDigit(texto.charAt(i))) {
                return false;
            }
        }
        return true;
    }

        public double converte(String arg) throws ParseException {
        //obtem um NumberFormat para o Locale default (BR)
        NumberFormat nf = NumberFormat.getNumberInstance();
        //converte um nÃºmero com vÃ­rgulas ex: 2,56 para double
        double number = nf.parse(arg).doubleValue();
        return number;
    }
}
